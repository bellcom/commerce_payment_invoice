<?php

/**
 * @file
 *   Provides a payment method to Invoices.
 */


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payment_invoice_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_payment_invoice'] = array(
    'title' => t('Invoice'),
    'description' => t('Payments with Invoices'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: submit form.
 */
function commerce_payment_invoice_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();
  $customer = commerce_customer_profile_load($order->commerce_customer_billing['und'][0]['profile_id']);
  
  $pane_values['field_ean_number'] = '';

  // Merge in values from the customer
  if (isset($customer->field_ean_nummer['und'][0])) {
    $pane_values['field_ean_number'] = $customer->field_ean_nummer['und'][0]['value'];
  }

  $form['field_ean_number'] = array(
    '#type' => 'textfield',
    '#title' => t('EAN number'),
    '#default_value' => $pane_values['field_ean_number'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_payment_invoice_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  
  // Throw an error if a long enough name was not provided.
  if (strlen($pane_values['field_ean_number']) !== 13) {
    form_set_error(implode('][', array_merge($form_parents, array('field_ean_number'))), t('You must enter an EAN number with a total of 13 digits.'));

    // Even though the form error is enough to stop the submission of the form,
    // it's not enough to stop it from a Commerce standpoint because of the
    // combined validation / submission going on per-pane in the checkout form.
    return FALSE;
  }
  else {
    $customer = commerce_customer_profile_load($order->commerce_customer_billing['und'][0]['profile_id']);
    $customer->field_ean_nummer['und'][0]['value'] = $pane_values['field_ean_number'];
    commerce_customer_profile_save($customer);
    return TRUE;
  }
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_payment_invoice_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  commerce_payment_invoice_transaction($payment_method, $order, $charge);
}

/**
 * Creates an invoice payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_payment_invoice_transaction($payment_method, $order, $charge) {
  $transaction = commerce_payment_transaction_new('commerce_payment_invoice', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;

  commerce_payment_transaction_save($transaction);
}
